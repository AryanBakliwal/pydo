# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.0, generator: @autorest/python@5.7.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.core.configuration import Configuration
from azure.core.pipeline import policies

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

VERSION = "unknown"

class DigitalOceanClientConfiguration(Configuration):
    """Configuration for DigitalOceanClient.

    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param droplet_id: A unique identifier for a Droplet instance.
    :type droplet_id: int
    :param per_page: Number of items returned per page.
    :type per_page: int
    :param page: Which 'page' of paginated results to return.
    :type page: int
    :param tag_name: Used to filter Droplets by a specific tag.
    :type tag_name: str
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        droplet_id: int,
        per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        tag_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if credential is None:
            raise ValueError("Parameter 'credential' must not be None.")
        if droplet_id is None:
            raise ValueError("Parameter 'droplet_id' must not be None.")
        super(DigitalOceanClientConfiguration, self).__init__(**kwargs)

        self.credential = credential
        self.droplet_id = droplet_id
        self.per_page = per_page
        self.page = page
        self.tag_name = tag_name
        self.credential_scopes = kwargs.pop('credential_scopes', ['https://api.digitalocean.com'])
        kwargs.setdefault('sdk_moniker', 'digitaloceanclient/{}'.format(VERSION))
        self._configure(**kwargs)

    def _configure(
        self,
        **kwargs: Any
    ) -> None:
        self.user_agent_policy = kwargs.get('user_agent_policy') or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get('headers_policy') or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get('proxy_policy') or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get('logging_policy') or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.http_logging_policy = kwargs.get('http_logging_policy') or policies.HttpLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get('retry_policy') or policies.AsyncRetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get('custom_hook_policy') or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get('redirect_policy') or policies.AsyncRedirectPolicy(**kwargs)
        self.authentication_policy = kwargs.get('authentication_policy')
        if self.credential and not self.authentication_policy:
            self.authentication_policy = policies.AsyncBearerTokenCredentialPolicy(self.credential, *self.credential_scopes, **kwargs)
