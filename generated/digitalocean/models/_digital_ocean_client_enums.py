# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.0, generator: @autorest/python@5.7.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ActionStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current status of the action. This can be "in-progress", "completed", or "errored".
    """

    IN_PROGRESS = "in-progress"
    COMPLETED = "completed"
    ERRORED = "errored"

class Distribution(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The name of a custom image's distribution. Currently, the valid values are  "Arch Linux",
    "CentOS", "CoreOS", "Debian", "Fedora", "Fedora Atomic",  "FreeBSD", "Gentoo", "openSUSE",
    "RancherOS", "Ubuntu", and "Unknown".  Any other value will be accepted but ignored, and
    "Unknown" will be used in its place.
    """

    ARCH_LINUX = "Arch Linux"
    CENT_OS = "CentOS"
    CORE_OS = "CoreOS"
    DEBIAN = "Debian"
    FEDORA = "Fedora"
    FEDORA_ATOMIC = "Fedora Atomic"
    FREE_BSD = "FreeBSD"
    GENTOO = "Gentoo"
    OPEN_SUSE = "openSUSE"
    RANCHER_OS = "RancherOS"
    UBUNTU = "Ubuntu"
    UNKNOWN = "Unknown"

class DropletActionTypeEnumType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of action to initiate for the Droplet.
    """

    ENABLE_BACKUPS = "enable_backups"
    DISABLE_BACKUPS = "disable_backups"
    REBOOT = "reboot"
    POWER_CYCLE = "power_cycle"
    SHUTDOWN = "shutdown"
    POWER_OFF = "power_off"
    POWER_ON = "power_on"
    RESTORE = "restore"
    PASSWORD_RESET = "password_reset"
    RESIZE = "resize"
    REBUILD = "rebuild"
    RENAME = "rename"
    CHANGE_KERNEL = "change_kernel"
    ENABLE_IPV6 = "enable_ipv6"
    SNAPSHOT = "snapshot"

class DropletSnapshotType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Describes the kind of image. It may be one of ``snapshot`` or ``backup``. This specifies
    whether an image is a user-generated Droplet snapshot or automatically created Droplet backup.
    """

    SNAPSHOT = "snapshot"
    BACKUP = "backup"

class DropletStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A status string indicating the state of the Droplet instance. This may be "new", "active",
    "off", or "archive".
    """

    NEW = "new"
    ACTIVE = "active"
    OFF = "off"
    ARCHIVE = "archive"

class ImageStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A status string indicating the state of a custom image. This may be ``NEW``\ ,
     ``available``\ , ``pending``\ , ``deleted``\ , or ``retired``.
    """

    NEW = "NEW"
    AVAILABLE = "available"
    PENDING = "pending"
    DELETED = "deleted"
    RETIRED = "retired"

class ImageType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Describes the kind of image. It may be one of "snapshot", "backup", or "custom". This specifies
    whether an image is a user-generated Droplet snapshot, automatically created Droplet backup, or
    a user-provided virtual machine image.
    """

    BASE = "base"
    SNAPSHOT = "snapshot"
    BACKUP = "backup"
    CUSTOM = "custom"

class NetworkV4Type(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the IPv4 network interface.
    """

    PUBLIC = "public"
    PRIVATE = "private"

class RegionSlug(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The slug identifier for the region where the resource will initially be  available.
    """

    AMS1 = "ams1"
    AMS2 = "ams2"
    AMS3 = "ams3"
    BLR1 = "blr1"
    FRA1 = "fra1"
    LON1 = "lon1"
    NYC1 = "nyc1"
    NYC2 = "nyc2"
    NYC3 = "nyc3"
    SFO1 = "sfo1"
    SFO2 = "sfo2"
    SFO3 = "sfo3"
    SGP1 = "sgp1"
    TOR1 = "tor1"
