# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.0, generator: @autorest/python@5.7.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

import msrest.serialization

from ._digital_ocean_client_enums import *


class Action(msrest.serialization.Model):
    """Action.

    :param id: A unique numeric ID that can be used to identify and reference an action.
    :type id: int
    :param status: The current status of the action. This can be "in-progress", "completed", or
     "errored". Possible values include: "in-progress", "completed", "errored". Default value:
     "in-progress".
    :type status: str or ~digitalocean.models.ActionStatus
    :param type: This is the type of action that the object represents. For example, this could be
     "transfer" to represent the state of an image transfer action.
    :type type: str
    :param started_at: A time value given in ISO8601 combined date and time format that represents
     when the action was initiated.
    :type started_at: ~datetime.datetime
    :param completed_at: A time value given in ISO8601 combined date and time format that
     represents when the action was completed.
    :type completed_at: ~datetime.datetime
    :param resource_id: A unique identifier for the resource that the action is associated with.
    :type resource_id: int
    :param resource_type: The type of resource that the action is associated with.
    :type resource_type: str
    :param region:
    :type region: ~digitalocean.models.Region
    :param region_slug:
    :type region_slug: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'started_at': {'key': 'started_at', 'type': 'iso-8601'},
        'completed_at': {'key': 'completed_at', 'type': 'iso-8601'},
        'resource_id': {'key': 'resource_id', 'type': 'int'},
        'resource_type': {'key': 'resource_type', 'type': 'str'},
        'region': {'key': 'region', 'type': 'Region'},
        'region_slug': {'key': 'region_slug', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        status: Optional[Union[str, "ActionStatus"]] = "in-progress",
        type: Optional[str] = None,
        started_at: Optional[datetime.datetime] = None,
        completed_at: Optional[datetime.datetime] = None,
        resource_id: Optional[int] = None,
        resource_type: Optional[str] = None,
        region: Optional["Region"] = None,
        region_slug: Optional[str] = None,
        **kwargs
    ):
        super(Action, self).__init__(**kwargs)
        self.id = id
        self.status = status
        self.type = type
        self.started_at = started_at
        self.completed_at = completed_at
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.region = region
        self.region_slug = region_slug


class ActionLink(msrest.serialization.Model):
    """The linked actions can be used to check the status of a Droplet's create event.

    :param id: A unique numeric ID that can be used to identify and reference an action.
    :type id: int
    :param rel: A string specifying the type of the related action.
    :type rel: str
    :param href: A URL that can be used to access the action.
    :type href: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'rel': {'key': 'rel', 'type': 'str'},
        'href': {'key': 'href', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        rel: Optional[str] = None,
        href: Optional[str] = None,
        **kwargs
    ):
        super(ActionLink, self).__init__(**kwargs)
        self.id = id
        self.rel = rel
        self.href = href


class LinkToPrevPage(msrest.serialization.Model):
    """LinkToPrevPage.

    :param prev: URI of the previous page of the results.
    :type prev: str
    """

    _attribute_map = {
        'prev': {'key': 'prev', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        prev: Optional[str] = None,
        **kwargs
    ):
        super(LinkToPrevPage, self).__init__(**kwargs)
        self.prev = prev


class LinkToFirstPage(msrest.serialization.Model):
    """LinkToFirstPage.

    :param first: URI of the first page of the results.
    :type first: str
    """

    _attribute_map = {
        'first': {'key': 'first', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        first: Optional[str] = None,
        **kwargs
    ):
        super(LinkToFirstPage, self).__init__(**kwargs)
        self.first = first


class BackwardLinks(LinkToFirstPage, LinkToPrevPage):
    """BackwardLinks.

    :param prev: URI of the previous page of the results.
    :type prev: str
    :param first: URI of the first page of the results.
    :type first: str
    """

    _attribute_map = {
        'prev': {'key': 'prev', 'type': 'str'},
        'first': {'key': 'first', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        prev: Optional[str] = None,
        first: Optional[str] = None,
        **kwargs
    ):
        super(BackwardLinks, self).__init__(first=first, prev=prev, **kwargs)
        self.prev = prev
        self.first = first


class ComponentsRan85FResponsesAllDropletBackupsContentApplicationJsonSchemaAllof0(msrest.serialization.Model):
    """ComponentsRan85FResponsesAllDropletBackupsContentApplicationJsonSchemaAllof0.

    :param backups:
    :type backups: list[~digitalocean.models.DropletSnapshot]
    """

    _attribute_map = {
        'backups': {'key': 'backups', 'type': '[DropletSnapshot]'},
    }

    def __init__(
        self,
        *,
        backups: Optional[List["DropletSnapshot"]] = None,
        **kwargs
    ):
        super(ComponentsRan85FResponsesAllDropletBackupsContentApplicationJsonSchemaAllof0, self).__init__(**kwargs)
        self.backups = backups


class Meta(msrest.serialization.Model):
    """Meta.

    All required parameters must be populated in order to send to Azure.

    :param meta: Required. Information about the response itself.
    :type meta: ~digitalocean.models.MetaMeta
    """

    _validation = {
        'meta': {'required': True},
    }

    _attribute_map = {
        'meta': {'key': 'meta', 'type': 'MetaMeta'},
    }

    def __init__(
        self,
        *,
        meta: "MetaMeta",
        **kwargs
    ):
        super(Meta, self).__init__(**kwargs)
        self.meta = meta


class Pagination(msrest.serialization.Model):
    """Pagination.

    :param links:
    :type links: ~digitalocean.models.PageLinks
    """

    _attribute_map = {
        'links': {'key': 'links', 'type': 'PageLinks'},
    }

    def __init__(
        self,
        *,
        links: Optional["PageLinks"] = None,
        **kwargs
    ):
        super(Pagination, self).__init__(**kwargs)
        self.links = links


class Components10IqkodResponsesAllDropletBackupsContentApplicationJsonSchema(Pagination, Meta, ComponentsRan85FResponsesAllDropletBackupsContentApplicationJsonSchemaAllof0):
    """Components10IqkodResponsesAllDropletBackupsContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param backups:
    :type backups: list[~digitalocean.models.DropletSnapshot]
    :param meta: Required. Information about the response itself.
    :type meta: ~digitalocean.models.MetaMeta
    :param links:
    :type links: ~digitalocean.models.PageLinks
    """

    _validation = {
        'meta': {'required': True},
    }

    _attribute_map = {
        'backups': {'key': 'backups', 'type': '[DropletSnapshot]'},
        'meta': {'key': 'meta', 'type': 'MetaMeta'},
        'links': {'key': 'links', 'type': 'PageLinks'},
    }

    def __init__(
        self,
        *,
        meta: "MetaMeta",
        backups: Optional[List["DropletSnapshot"]] = None,
        links: Optional["PageLinks"] = None,
        **kwargs
    ):
        super(Components10IqkodResponsesAllDropletBackupsContentApplicationJsonSchema, self).__init__(links=links, meta=meta, backups=backups, **kwargs)
        self.backups = backups
        self.meta = meta
        self.backups = backups
        self.links = links
        self.meta = meta
        self.links = links


class Components10LqvkkResponsesDropletCreateContentApplicationJsonSchemaOneof1PropertiesLinks(msrest.serialization.Model):
    """Components10LqvkkResponsesDropletCreateContentApplicationJsonSchemaOneof1PropertiesLinks.

    :param actions:
    :type actions: list[~digitalocean.models.ActionLink]
    """

    _attribute_map = {
        'actions': {'key': 'actions', 'type': '[ActionLink]'},
    }

    def __init__(
        self,
        *,
        actions: Optional[List["ActionLink"]] = None,
        **kwargs
    ):
        super(Components10LqvkkResponsesDropletCreateContentApplicationJsonSchemaOneof1PropertiesLinks, self).__init__(**kwargs)
        self.actions = actions


class Components1Bp6Ru2ResponsesAllDropletActionsContentApplicationJsonSchemaAllof0(msrest.serialization.Model):
    """Components1Bp6Ru2ResponsesAllDropletActionsContentApplicationJsonSchemaAllof0.

    :param actions:
    :type actions: list[~digitalocean.models.Action]
    """

    _attribute_map = {
        'actions': {'key': 'actions', 'type': '[Action]'},
    }

    def __init__(
        self,
        *,
        actions: Optional[List["Action"]] = None,
        **kwargs
    ):
        super(Components1Bp6Ru2ResponsesAllDropletActionsContentApplicationJsonSchemaAllof0, self).__init__(**kwargs)
        self.actions = actions


class Components19JfuwyResponsesAllDropletActionsContentApplicationJsonSchema(Pagination, Meta, Components1Bp6Ru2ResponsesAllDropletActionsContentApplicationJsonSchemaAllof0):
    """Components19JfuwyResponsesAllDropletActionsContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param actions:
    :type actions: list[~digitalocean.models.Action]
    :param meta: Required. Information about the response itself.
    :type meta: ~digitalocean.models.MetaMeta
    :param links:
    :type links: ~digitalocean.models.PageLinks
    """

    _validation = {
        'meta': {'required': True},
    }

    _attribute_map = {
        'actions': {'key': 'actions', 'type': '[Action]'},
        'meta': {'key': 'meta', 'type': 'MetaMeta'},
        'links': {'key': 'links', 'type': 'PageLinks'},
    }

    def __init__(
        self,
        *,
        meta: "MetaMeta",
        actions: Optional[List["Action"]] = None,
        links: Optional["PageLinks"] = None,
        **kwargs
    ):
        super(Components19JfuwyResponsesAllDropletActionsContentApplicationJsonSchema, self).__init__(links=links, meta=meta, actions=actions, **kwargs)
        self.actions = actions
        self.meta = meta
        self.actions = actions
        self.links = links
        self.meta = meta
        self.links = links


class Components1Fz6HvkResponsesExistingDropletContentApplicationJsonSchema(msrest.serialization.Model):
    """Components1Fz6HvkResponsesExistingDropletContentApplicationJsonSchema.

    :param droplet:
    :type droplet: ~digitalocean.models.Droplet
    """

    _attribute_map = {
        'droplet': {'key': 'droplet', 'type': 'Droplet'},
    }

    def __init__(
        self,
        *,
        droplet: Optional["Droplet"] = None,
        **kwargs
    ):
        super(Components1Fz6HvkResponsesExistingDropletContentApplicationJsonSchema, self).__init__(**kwargs)
        self.droplet = droplet


class Components1Sllx9CResponsesDropletActionContentApplicationJsonSchema(msrest.serialization.Model):
    """Components1Sllx9CResponsesDropletActionContentApplicationJsonSchema.

    :param action:
    :type action: ~digitalocean.models.Action
    """

    _attribute_map = {
        'action': {'key': 'action', 'type': 'Action'},
    }

    def __init__(
        self,
        *,
        action: Optional["Action"] = None,
        **kwargs
    ):
        super(Components1Sllx9CResponsesDropletActionContentApplicationJsonSchema, self).__init__(**kwargs)
        self.action = action


class ComponentsMf1I3YResponsesAllDropletSnapshotsContentApplicationJsonSchemaAllof0(msrest.serialization.Model):
    """ComponentsMf1I3YResponsesAllDropletSnapshotsContentApplicationJsonSchemaAllof0.

    :param snapshots:
    :type snapshots: list[~digitalocean.models.DropletSnapshot]
    """

    _attribute_map = {
        'snapshots': {'key': 'snapshots', 'type': '[DropletSnapshot]'},
    }

    def __init__(
        self,
        *,
        snapshots: Optional[List["DropletSnapshot"]] = None,
        **kwargs
    ):
        super(ComponentsMf1I3YResponsesAllDropletSnapshotsContentApplicationJsonSchemaAllof0, self).__init__(**kwargs)
        self.snapshots = snapshots


class ComponentsAa1O1RResponsesAllDropletSnapshotsContentApplicationJsonSchema(Pagination, Meta, ComponentsMf1I3YResponsesAllDropletSnapshotsContentApplicationJsonSchemaAllof0):
    """ComponentsAa1O1RResponsesAllDropletSnapshotsContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param snapshots:
    :type snapshots: list[~digitalocean.models.DropletSnapshot]
    :param meta: Required. Information about the response itself.
    :type meta: ~digitalocean.models.MetaMeta
    :param links:
    :type links: ~digitalocean.models.PageLinks
    """

    _validation = {
        'meta': {'required': True},
    }

    _attribute_map = {
        'snapshots': {'key': 'snapshots', 'type': '[DropletSnapshot]'},
        'meta': {'key': 'meta', 'type': 'MetaMeta'},
        'links': {'key': 'links', 'type': 'PageLinks'},
    }

    def __init__(
        self,
        *,
        meta: "MetaMeta",
        snapshots: Optional[List["DropletSnapshot"]] = None,
        links: Optional["PageLinks"] = None,
        **kwargs
    ):
        super(ComponentsAa1O1RResponsesAllDropletSnapshotsContentApplicationJsonSchema, self).__init__(links=links, meta=meta, snapshots=snapshots, **kwargs)
        self.snapshots = snapshots
        self.meta = meta
        self.snapshots = snapshots
        self.links = links
        self.meta = meta
        self.links = links


class ComponentsAplp5ResponsesAllDropletsContentApplicationJsonSchemaAllof0(msrest.serialization.Model):
    """ComponentsAplp5ResponsesAllDropletsContentApplicationJsonSchemaAllof0.

    :param droplets:
    :type droplets: list[~digitalocean.models.Droplet]
    """

    _attribute_map = {
        'droplets': {'key': 'droplets', 'type': '[Droplet]'},
    }

    def __init__(
        self,
        *,
        droplets: Optional[List["Droplet"]] = None,
        **kwargs
    ):
        super(ComponentsAplp5ResponsesAllDropletsContentApplicationJsonSchemaAllof0, self).__init__(**kwargs)
        self.droplets = droplets


class ComponentsMufb2AResponsesAllDropletsContentApplicationJsonSchema(ComponentsAplp5ResponsesAllDropletsContentApplicationJsonSchemaAllof0, Pagination, Meta):
    """ComponentsMufb2AResponsesAllDropletsContentApplicationJsonSchema.

    All required parameters must be populated in order to send to Azure.

    :param meta: Required. Information about the response itself.
    :type meta: ~digitalocean.models.MetaMeta
    :param links:
    :type links: ~digitalocean.models.PageLinks
    :param droplets:
    :type droplets: list[~digitalocean.models.Droplet]
    """

    _validation = {
        'meta': {'required': True},
    }

    _attribute_map = {
        'meta': {'key': 'meta', 'type': 'MetaMeta'},
        'links': {'key': 'links', 'type': 'PageLinks'},
        'droplets': {'key': 'droplets', 'type': '[Droplet]'},
    }

    def __init__(
        self,
        *,
        meta: "MetaMeta",
        links: Optional["PageLinks"] = None,
        droplets: Optional[List["Droplet"]] = None,
        **kwargs
    ):
        super(ComponentsMufb2AResponsesAllDropletsContentApplicationJsonSchema, self).__init__(droplets=droplets, links=links, meta=meta, **kwargs)
        self.meta = meta
        self.links = links
        self.meta = meta
        self.droplets = droplets
        self.links = links
        self.droplets = droplets


class Droplet(msrest.serialization.Model):
    """Droplet.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. A unique identifier for each Droplet instance. This is automatically
     generated upon Droplet creation.
    :type id: int
    :param name: Required. The human-readable name set for the Droplet instance.
    :type name: str
    :param memory: Required. Memory of the Droplet in megabytes.
    :type memory: int
    :param vcpus: Required. The number of virtual CPUs.
    :type vcpus: int
    :param disk: Required. The size of the Droplet's disk in gigabytes.
    :type disk: int
    :param locked: Required. A boolean value indicating whether the Droplet has been locked,
     preventing actions by users.
    :type locked: bool
    :param status: Required. A status string indicating the state of the Droplet instance. This may
     be "new", "active", "off", or "archive". Possible values include: "new", "active", "off",
     "archive".
    :type status: str or ~digitalocean.models.DropletStatus
    :param kernel: Required. **Note**\ : All Droplets created after March 2017 use internal kernels
     by default.
     These Droplets will have this attribute set to ``null``.
    
     The current `kernel <https://www.digitalocean.com/docs/droplets/how-to/kernel/>`_
     for Droplets with externally managed kernels. This will initially be set to
     the kernel of the base image when the Droplet is created.
    :type kernel: ~digitalocean.models.Kernel
    :param created_at: Required. A time value given in ISO8601 combined date and time format that
     represents when the Droplet was created.
    :type created_at: ~datetime.datetime
    :param features: Required. An array of features enabled on this Droplet.
    :type features: list[str]
    :param backup_ids: Required. An array of backup IDs of any backups that have been taken of the
     Droplet instance.  Droplet backups are enabled at the time of the instance creation.
    :type backup_ids: list[int]
    :param next_backup_window: Required. The details of the Droplet's backups feature, if backups
     are configured for the Droplet. This object contains keys for the start and end times of the
     window during which the backup will start.
    :type next_backup_window: ~digitalocean.models.DropletNextBackupWindow
    :param snapshot_ids: Required. An array of snapshot IDs of any snapshots created from the
     Droplet instance.
    :type snapshot_ids: list[int]
    :param image: Required.
    :type image: ~digitalocean.models.Image
    :param volume_ids: Required. A flat array including the unique identifier for each Block
     Storage volume attached to the Droplet.
    :type volume_ids: list[str]
    :param size: Required.
    :type size: ~digitalocean.models.Size
    :param size_slug: Required. The unique slug identifier for the size of this Droplet.
    :type size_slug: str
    :param networks: Required. The details of the network that are configured for the Droplet
     instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these
     is an array that contains objects describing an individual IP resource allocated to the
     Droplet.  These will define attributes like the IP address, netmask, and gateway of the
     specific network depending on the type of network it is.
    :type networks: ~digitalocean.models.DropletNetworks
    :param region: Required.
    :type region: ~digitalocean.models.Region
    :param tags: Required. A set of tags. An array of Tags the Droplet has been tagged with.
    :type tags: list[str]
    :param vpc_uuid: A string specifying the UUID of the VPC to which the Droplet is assigned.
    :type vpc_uuid: str
    """

    _validation = {
        'id': {'required': True},
        'name': {'required': True},
        'memory': {'required': True, 'multiple': 8},
        'vcpus': {'required': True},
        'disk': {'required': True},
        'locked': {'required': True},
        'status': {'required': True},
        'kernel': {'required': True},
        'created_at': {'required': True},
        'features': {'required': True},
        'backup_ids': {'required': True},
        'next_backup_window': {'required': True},
        'snapshot_ids': {'required': True},
        'image': {'required': True},
        'volume_ids': {'required': True},
        'size': {'required': True},
        'size_slug': {'required': True},
        'networks': {'required': True},
        'region': {'required': True},
        'tags': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'memory': {'key': 'memory', 'type': 'int'},
        'vcpus': {'key': 'vcpus', 'type': 'int'},
        'disk': {'key': 'disk', 'type': 'int'},
        'locked': {'key': 'locked', 'type': 'bool'},
        'status': {'key': 'status', 'type': 'str'},
        'kernel': {'key': 'kernel', 'type': 'Kernel'},
        'created_at': {'key': 'created_at', 'type': 'iso-8601'},
        'features': {'key': 'features', 'type': '[str]'},
        'backup_ids': {'key': 'backup_ids', 'type': '[int]'},
        'next_backup_window': {'key': 'next_backup_window', 'type': 'DropletNextBackupWindow'},
        'snapshot_ids': {'key': 'snapshot_ids', 'type': '[int]'},
        'image': {'key': 'image', 'type': 'Image'},
        'volume_ids': {'key': 'volume_ids', 'type': '[str]'},
        'size': {'key': 'size', 'type': 'Size'},
        'size_slug': {'key': 'size_slug', 'type': 'str'},
        'networks': {'key': 'networks', 'type': 'DropletNetworks'},
        'region': {'key': 'region', 'type': 'Region'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'vpc_uuid': {'key': 'vpc_uuid', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: int,
        name: str,
        memory: int,
        vcpus: int,
        disk: int,
        locked: bool,
        status: Union[str, "DropletStatus"],
        kernel: "Kernel",
        created_at: datetime.datetime,
        features: List[str],
        backup_ids: List[int],
        next_backup_window: "DropletNextBackupWindow",
        snapshot_ids: List[int],
        image: "Image",
        volume_ids: List[str],
        size: "Size",
        size_slug: str,
        networks: "DropletNetworks",
        region: "Region",
        tags: List[str],
        vpc_uuid: Optional[str] = None,
        **kwargs
    ):
        super(Droplet, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.memory = memory
        self.vcpus = vcpus
        self.disk = disk
        self.locked = locked
        self.status = status
        self.kernel = kernel
        self.created_at = created_at
        self.features = features
        self.backup_ids = backup_ids
        self.next_backup_window = next_backup_window
        self.snapshot_ids = snapshot_ids
        self.image = image
        self.volume_ids = volume_ids
        self.size = size
        self.size_slug = size_slug
        self.networks = networks
        self.region = region
        self.tags = tags
        self.vpc_uuid = vpc_uuid


class DropletActionTypeEnum(msrest.serialization.Model):
    """Specifies the action that will be taken on the Droplet.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        **kwargs
    ):
        super(DropletActionTypeEnum, self).__init__(**kwargs)
        self.type = type


class DropletActionChangeKernel(DropletActionTypeEnum):
    """DropletActionChangeKernel.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    :param kernel: A unique number used to identify and reference a specific kernel.
    :type kernel: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'kernel': {'key': 'kernel', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        kernel: Optional[int] = None,
        **kwargs
    ):
        super(DropletActionChangeKernel, self).__init__(type=type, **kwargs)
        self.kernel = kernel


class DropletActionRebuild(DropletActionTypeEnum):
    """DropletActionRebuild.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    :param image: The image ID of a public or private image or the slug identifier for a public
     image. The Droplet will be rebuilt using this image as its base.
    :type image: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'image': {'key': 'image', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        image: Optional[object] = None,
        **kwargs
    ):
        super(DropletActionRebuild, self).__init__(type=type, **kwargs)
        self.image = image


class DropletActionRename(DropletActionTypeEnum):
    """DropletActionRename.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    :param name: The new name for the Droplet.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        name: Optional[str] = None,
        **kwargs
    ):
        super(DropletActionRename, self).__init__(type=type, **kwargs)
        self.name = name


class DropletActionResize(DropletActionTypeEnum):
    """DropletActionResize.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    :param disk: When ``true``\ , the Droplet's disk will be resized in addition to its RAM and
     CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be
     decreased.
    :type disk: bool
    :param size: The slug identifier for the size to which you wish to resize the Droplet.
    :type size: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'disk': {'key': 'disk', 'type': 'bool'},
        'size': {'key': 'size', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        disk: Optional[bool] = None,
        size: Optional[str] = None,
        **kwargs
    ):
        super(DropletActionResize, self).__init__(type=type, **kwargs)
        self.disk = disk
        self.size = size


class DropletActionRestore(DropletActionTypeEnum):
    """DropletActionRestore.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    :param image: The ID of a backup of the current Droplet instance to restore from.
    :type image: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'image': {'key': 'image', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        image: Optional[int] = None,
        **kwargs
    ):
        super(DropletActionRestore, self).__init__(type=type, **kwargs)
        self.image = image


class DropletActionSnapshot(DropletActionTypeEnum):
    """DropletActionSnapshot.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. The type of action to initiate for the Droplet. Possible values include:
     "enable_backups", "disable_backups", "reboot", "power_cycle", "shutdown", "power_off",
     "power_on", "restore", "password_reset", "resize", "rebuild", "rename", "change_kernel",
     "enable_ipv6", "snapshot".
    :type type: str or ~digitalocean.models.DropletActionTypeEnumType
    :param name: The name to give the new snapshot of the Droplet.
    :type name: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "DropletActionTypeEnumType"],
        name: Optional[str] = None,
        **kwargs
    ):
        super(DropletActionSnapshot, self).__init__(type=type, **kwargs)
        self.name = name


class DropletCreate(msrest.serialization.Model):
    """DropletCreate.

    All required parameters must be populated in order to send to Azure.

    :param region: Required. The slug identifier for the region that you wish to deploy the Droplet
     in.
    :type region: str
    :param size: Required. The slug identifier for the size that you wish to select for this
     Droplet.
    :type size: str
    :param image: Required. The image ID of a public or private image or the slug identifier for a
     public image. This image will be the base image for your Droplet.
    :type image: object
    :param ssh_keys: An array containing the IDs or fingerprints of the SSH keys that you wish to
     embed in the Droplet's root account upon creation.
    :type ssh_keys: list[object]
    :param backups: A boolean indicating whether automated backups should be enabled for the
     Droplet.
    :type backups: bool
    :param ipv6: A boolean indicating whether to enable IPv6 on the Droplet.
    :type ipv6: bool
    :param monitoring: A boolean indicating whether to install the DigitalOcean agent for
     monitoring.
    :type monitoring: bool
    :param tags: A set of tags. A flat array of tag names as strings to apply to the Droplet after
     it is created. Tag names can either be existing or new tags.
    :type tags: list[str]
    :param user_data: A string containing 'user data' which may be used to configure the Droplet on
     first boot, often a 'cloud-config' file or Bash script. It must be plain text and may not
     exceed 64 KiB in size.
    :type user_data: str
    :param private_networking: This parameter has been deprecated. Use ``vpc_uuid`` instead to
     specify a VPC network for the Droplet. If no ``vpc_uuid`` is provided, the Droplet will be
     placed in your account's default VPC for the region.
    :type private_networking: bool
    :param vpc_uuid: A string specifying the UUID of the VPC to which the Droplet will be assigned.
     If excluded, the Droplet will be assigned to your account's default VPC for the region.
    :type vpc_uuid: str
    """

    _validation = {
        'region': {'required': True},
        'size': {'required': True},
        'image': {'required': True},
    }

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'image': {'key': 'image', 'type': 'object'},
        'ssh_keys': {'key': 'ssh_keys', 'type': '[object]'},
        'backups': {'key': 'backups', 'type': 'bool'},
        'ipv6': {'key': 'ipv6', 'type': 'bool'},
        'monitoring': {'key': 'monitoring', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'user_data': {'key': 'user_data', 'type': 'str'},
        'private_networking': {'key': 'private_networking', 'type': 'bool'},
        'vpc_uuid': {'key': 'vpc_uuid', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        region: str,
        size: str,
        image: object,
        ssh_keys: Optional[List[object]] = [],
        backups: Optional[bool] = False,
        ipv6: Optional[bool] = False,
        monitoring: Optional[bool] = False,
        tags: Optional[List[str]] = [],
        user_data: Optional[str] = None,
        private_networking: Optional[bool] = False,
        vpc_uuid: Optional[str] = None,
        **kwargs
    ):
        super(DropletCreate, self).__init__(**kwargs)
        self.region = region
        self.size = size
        self.image = image
        self.ssh_keys = ssh_keys
        self.backups = backups
        self.ipv6 = ipv6
        self.monitoring = monitoring
        self.tags = tags
        self.user_data = user_data
        self.private_networking = private_networking
        self.vpc_uuid = vpc_uuid


class DropletCreateApplicationJsonOneOfProperties(msrest.serialization.Model):
    """DropletCreateApplicationJsonOneOfProperties.

    :param actions:
    :type actions: list[~digitalocean.models.ActionLink]
    """

    _attribute_map = {
        'actions': {'key': 'actions', 'type': '[ActionLink]'},
    }

    def __init__(
        self,
        *,
        actions: Optional[List["ActionLink"]] = None,
        **kwargs
    ):
        super(DropletCreateApplicationJsonOneOfProperties, self).__init__(**kwargs)
        self.actions = actions


class DropletMultiCreate(DropletCreate):
    """Multiple Droplet Request.

    All required parameters must be populated in order to send to Azure.

    :param region: Required. The slug identifier for the region that you wish to deploy the Droplet
     in.
    :type region: str
    :param size: Required. The slug identifier for the size that you wish to select for this
     Droplet.
    :type size: str
    :param image: Required. The image ID of a public or private image or the slug identifier for a
     public image. This image will be the base image for your Droplet.
    :type image: object
    :param ssh_keys: An array containing the IDs or fingerprints of the SSH keys that you wish to
     embed in the Droplet's root account upon creation.
    :type ssh_keys: list[object]
    :param backups: A boolean indicating whether automated backups should be enabled for the
     Droplet.
    :type backups: bool
    :param ipv6: A boolean indicating whether to enable IPv6 on the Droplet.
    :type ipv6: bool
    :param monitoring: A boolean indicating whether to install the DigitalOcean agent for
     monitoring.
    :type monitoring: bool
    :param tags: A set of tags. A flat array of tag names as strings to apply to the Droplet after
     it is created. Tag names can either be existing or new tags.
    :type tags: list[str]
    :param user_data: A string containing 'user data' which may be used to configure the Droplet on
     first boot, often a 'cloud-config' file or Bash script. It must be plain text and may not
     exceed 64 KiB in size.
    :type user_data: str
    :param private_networking: This parameter has been deprecated. Use ``vpc_uuid`` instead to
     specify a VPC network for the Droplet. If no ``vpc_uuid`` is provided, the Droplet will be
     placed in your account's default VPC for the region.
    :type private_networking: bool
    :param vpc_uuid: A string specifying the UUID of the VPC to which the Droplet will be assigned.
     If excluded, the Droplet will be assigned to your account's default VPC for the region.
    :type vpc_uuid: str
    :param names: Required. An array of human human-readable strings you wish to use when
     displaying the Droplet name. Each name, if set to a domain name managed in the DigitalOcean DNS
     management system, will configure a PTR record for the Droplet. Each name set during creation
     will also determine the hostname for the Droplet in its internal configuration.
    :type names: list[str]
    """

    _validation = {
        'region': {'required': True},
        'size': {'required': True},
        'image': {'required': True},
        'names': {'required': True},
    }

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'image': {'key': 'image', 'type': 'object'},
        'ssh_keys': {'key': 'ssh_keys', 'type': '[object]'},
        'backups': {'key': 'backups', 'type': 'bool'},
        'ipv6': {'key': 'ipv6', 'type': 'bool'},
        'monitoring': {'key': 'monitoring', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'user_data': {'key': 'user_data', 'type': 'str'},
        'private_networking': {'key': 'private_networking', 'type': 'bool'},
        'vpc_uuid': {'key': 'vpc_uuid', 'type': 'str'},
        'names': {'key': 'names', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        region: str,
        size: str,
        image: object,
        names: List[str],
        ssh_keys: Optional[List[object]] = [],
        backups: Optional[bool] = False,
        ipv6: Optional[bool] = False,
        monitoring: Optional[bool] = False,
        tags: Optional[List[str]] = [],
        user_data: Optional[str] = None,
        private_networking: Optional[bool] = False,
        vpc_uuid: Optional[str] = None,
        **kwargs
    ):
        super(DropletMultiCreate, self).__init__(region=region, size=size, image=image, ssh_keys=ssh_keys, backups=backups, ipv6=ipv6, monitoring=monitoring, tags=tags, user_data=user_data, private_networking=private_networking, vpc_uuid=vpc_uuid, **kwargs)
        self.names = names


class DropletNetworks(msrest.serialization.Model):
    """The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.

    :param v4:
    :type v4: list[~digitalocean.models.NetworkV4]
    :param v6:
    :type v6: list[~digitalocean.models.NetworkV6]
    """

    _attribute_map = {
        'v4': {'key': 'v4', 'type': '[NetworkV4]'},
        'v6': {'key': 'v6', 'type': '[NetworkV6]'},
    }

    def __init__(
        self,
        *,
        v4: Optional[List["NetworkV4"]] = None,
        v6: Optional[List["NetworkV6"]] = None,
        **kwargs
    ):
        super(DropletNetworks, self).__init__(**kwargs)
        self.v4 = v4
        self.v6 = v6


class DropletNextBackupWindow(msrest.serialization.Model):
    """The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.

    :param start: A time value given in ISO8601 combined date and time format specifying the start
     of the Droplet's backup window.
    :type start: ~datetime.datetime
    :param end: A time value given in ISO8601 combined date and time format specifying the end of
     the Droplet's backup window.
    :type end: ~datetime.datetime
    """

    _attribute_map = {
        'start': {'key': 'start', 'type': 'iso-8601'},
        'end': {'key': 'end', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        start: Optional[datetime.datetime] = None,
        end: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(DropletNextBackupWindow, self).__init__(**kwargs)
        self.start = start
        self.end = end


class DropletSingleCreate(DropletCreate):
    """Single Droplet Request.

    All required parameters must be populated in order to send to Azure.

    :param region: Required. The slug identifier for the region that you wish to deploy the Droplet
     in.
    :type region: str
    :param size: Required. The slug identifier for the size that you wish to select for this
     Droplet.
    :type size: str
    :param image: Required. The image ID of a public or private image or the slug identifier for a
     public image. This image will be the base image for your Droplet.
    :type image: object
    :param ssh_keys: An array containing the IDs or fingerprints of the SSH keys that you wish to
     embed in the Droplet's root account upon creation.
    :type ssh_keys: list[object]
    :param backups: A boolean indicating whether automated backups should be enabled for the
     Droplet.
    :type backups: bool
    :param ipv6: A boolean indicating whether to enable IPv6 on the Droplet.
    :type ipv6: bool
    :param monitoring: A boolean indicating whether to install the DigitalOcean agent for
     monitoring.
    :type monitoring: bool
    :param tags: A set of tags. A flat array of tag names as strings to apply to the Droplet after
     it is created. Tag names can either be existing or new tags.
    :type tags: list[str]
    :param user_data: A string containing 'user data' which may be used to configure the Droplet on
     first boot, often a 'cloud-config' file or Bash script. It must be plain text and may not
     exceed 64 KiB in size.
    :type user_data: str
    :param private_networking: This parameter has been deprecated. Use ``vpc_uuid`` instead to
     specify a VPC network for the Droplet. If no ``vpc_uuid`` is provided, the Droplet will be
     placed in your account's default VPC for the region.
    :type private_networking: bool
    :param vpc_uuid: A string specifying the UUID of the VPC to which the Droplet will be assigned.
     If excluded, the Droplet will be assigned to your account's default VPC for the region.
    :type vpc_uuid: str
    :param name: Required. The human-readable string you wish to use when displaying the Droplet
     name. The name, if set to a domain name managed in the DigitalOcean DNS management system, will
     configure a PTR record for the Droplet. The name set during creation will also determine the
     hostname for the Droplet in its internal configuration.
    :type name: str
    """

    _validation = {
        'region': {'required': True},
        'size': {'required': True},
        'image': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'image': {'key': 'image', 'type': 'object'},
        'ssh_keys': {'key': 'ssh_keys', 'type': '[object]'},
        'backups': {'key': 'backups', 'type': 'bool'},
        'ipv6': {'key': 'ipv6', 'type': 'bool'},
        'monitoring': {'key': 'monitoring', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'user_data': {'key': 'user_data', 'type': 'str'},
        'private_networking': {'key': 'private_networking', 'type': 'bool'},
        'vpc_uuid': {'key': 'vpc_uuid', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        region: str,
        size: str,
        image: object,
        name: str,
        ssh_keys: Optional[List[object]] = [],
        backups: Optional[bool] = False,
        ipv6: Optional[bool] = False,
        monitoring: Optional[bool] = False,
        tags: Optional[List[str]] = [],
        user_data: Optional[str] = None,
        private_networking: Optional[bool] = False,
        vpc_uuid: Optional[str] = None,
        **kwargs
    ):
        super(DropletSingleCreate, self).__init__(region=region, size=size, image=image, ssh_keys=ssh_keys, backups=backups, ipv6=ipv6, monitoring=monitoring, tags=tags, user_data=user_data, private_networking=private_networking, vpc_uuid=vpc_uuid, **kwargs)
        self.name = name


class SnapshotBase(msrest.serialization.Model):
    """SnapshotBase.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. A human-readable name for the snapshot.
    :type name: str
    :param created_at: Required. A time value given in ISO8601 combined date and time format that
     represents when the snapshot was created.
    :type created_at: ~datetime.datetime
    :param regions: Required. An array of the regions that the snapshot is available in. The
     regions are represented by their identifying slug values.
    :type regions: list[str]
    :param min_disk_size: Required. The minimum size in GB required for a volume or Droplet to use
     this snapshot.
    :type min_disk_size: int
    :param size_gigabytes: Required. The billable size of the snapshot in gigabytes.
    :type size_gigabytes: float
    """

    _validation = {
        'name': {'required': True},
        'created_at': {'required': True},
        'regions': {'required': True},
        'min_disk_size': {'required': True},
        'size_gigabytes': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'created_at': {'key': 'created_at', 'type': 'iso-8601'},
        'regions': {'key': 'regions', 'type': '[str]'},
        'min_disk_size': {'key': 'min_disk_size', 'type': 'int'},
        'size_gigabytes': {'key': 'size_gigabytes', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        name: str,
        created_at: datetime.datetime,
        regions: List[str],
        min_disk_size: int,
        size_gigabytes: float,
        **kwargs
    ):
        super(SnapshotBase, self).__init__(**kwargs)
        self.name = name
        self.created_at = created_at
        self.regions = regions
        self.min_disk_size = min_disk_size
        self.size_gigabytes = size_gigabytes


class DropletSnapshot(SnapshotBase):
    """DropletSnapshot.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. A human-readable name for the snapshot.
    :type name: str
    :param created_at: Required. A time value given in ISO8601 combined date and time format that
     represents when the snapshot was created.
    :type created_at: ~datetime.datetime
    :param regions: Required. An array of the regions that the snapshot is available in. The
     regions are represented by their identifying slug values.
    :type regions: list[str]
    :param min_disk_size: Required. The minimum size in GB required for a volume or Droplet to use
     this snapshot.
    :type min_disk_size: int
    :param size_gigabytes: Required. The billable size of the snapshot in gigabytes.
    :type size_gigabytes: float
    :param type: Required. Describes the kind of image. It may be one of ``snapshot`` or
     ``backup``. This specifies whether an image is a user-generated Droplet snapshot or
     automatically created Droplet backup. Possible values include: "snapshot", "backup".
    :type type: str or ~digitalocean.models.DropletSnapshotType
    """

    _validation = {
        'name': {'required': True},
        'created_at': {'required': True},
        'regions': {'required': True},
        'min_disk_size': {'required': True},
        'size_gigabytes': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'created_at': {'key': 'created_at', 'type': 'iso-8601'},
        'regions': {'key': 'regions', 'type': '[str]'},
        'min_disk_size': {'key': 'min_disk_size', 'type': 'int'},
        'size_gigabytes': {'key': 'size_gigabytes', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        created_at: datetime.datetime,
        regions: List[str],
        min_disk_size: int,
        size_gigabytes: float,
        type: Union[str, "DropletSnapshotType"],
        **kwargs
    ):
        super(DropletSnapshot, self).__init__(name=name, created_at=created_at, regions=regions, min_disk_size=min_disk_size, size_gigabytes=size_gigabytes, **kwargs)
        self.type = type


class Error(msrest.serialization.Model):
    """Error.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. A short identifier corresponding to the HTTP status code returned. For
     example, the ID for a response returning a 404 status code would be "not_found.".
    :type id: str
    :param message: Required. A message providing additional information about the error, including
     details to help resolve it when possible.
    :type message: str
    :param request_id: Optionally, some endpoints may include a request ID that should be  provided
     when reporting bugs or opening support tickets to help  identify the issue.
    :type request_id: str
    """

    _validation = {
        'id': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'request_id': {'key': 'request_id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: str,
        message: str,
        request_id: Optional[str] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.id = id
        self.message = message
        self.request_id = request_id


class LinkToNextPage(msrest.serialization.Model):
    """LinkToNextPage.

    :param next: URI of the next page of the results.
    :type next: str
    """

    _attribute_map = {
        'next': {'key': 'next', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        next: Optional[str] = None,
        **kwargs
    ):
        super(LinkToNextPage, self).__init__(**kwargs)
        self.next = next


class LinkToLastPage(msrest.serialization.Model):
    """LinkToLastPage.

    :param last: URI of the last page of the results.
    :type last: str
    """

    _attribute_map = {
        'last': {'key': 'last', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        last: Optional[str] = None,
        **kwargs
    ):
        super(LinkToLastPage, self).__init__(**kwargs)
        self.last = last


class ForwardLinks(LinkToLastPage, LinkToNextPage):
    """ForwardLinks.

    :param next: URI of the next page of the results.
    :type next: str
    :param last: URI of the last page of the results.
    :type last: str
    """

    _attribute_map = {
        'next': {'key': 'next', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        next: Optional[str] = None,
        last: Optional[str] = None,
        **kwargs
    ):
        super(ForwardLinks, self).__init__(last=last, next=next, **kwargs)
        self.next = next
        self.last = last


class Image(msrest.serialization.Model):
    """Image.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: A unique number that can be used to identify and reference a specific image.
    :vartype id: int
    :param name: The display name that has been given to an image.  This is what is shown in the
     control panel and is generally a descriptive title for the image in question.
    :type name: str
    :param type: Describes the kind of image. It may be one of "snapshot", "backup", or "custom".
     This specifies whether an image is a user-generated Droplet snapshot, automatically created
     Droplet backup, or a user-provided virtual machine image. Possible values include: "base",
     "snapshot", "backup", "custom".
    :type type: str or ~digitalocean.models.ImageType
    :param distribution: The name of a custom image's distribution. Currently, the valid values are
     "Arch Linux", "CentOS", "CoreOS", "Debian", "Fedora", "Fedora Atomic",  "FreeBSD", "Gentoo",
     "openSUSE", "RancherOS", "Ubuntu", and "Unknown".  Any other value will be accepted but
     ignored, and "Unknown" will be used in its place. Possible values include: "Arch Linux",
     "CentOS", "CoreOS", "Debian", "Fedora", "Fedora Atomic", "FreeBSD", "Gentoo", "openSUSE",
     "RancherOS", "Ubuntu", "Unknown".
    :type distribution: str or ~digitalocean.models.Distribution
    :param slug: A uniquely identifying string that is associated with each of the
     DigitalOcean-provided public images. These can be used to reference a public image as an
     alternative to the numeric id.
    :type slug: str
    :param public: This is a boolean value that indicates whether the image in question is public
     or not. An image that is public is available to all accounts. A non-public image is only
     accessible from your account.
    :type public: bool
    :param regions: This attribute is an array of the regions that the image is available in. The
     regions are represented by their identifying slug values.
    :type regions: list[str or ~digitalocean.models.RegionSlug]
    :param created_at: A time value given in ISO8601 combined date and time format that represents
     when the image was created.
    :type created_at: ~datetime.datetime
    :param min_disk_size: The minimum disk size in GB required for a Droplet to use this image.
    :type min_disk_size: int
    :param size_gigabytes: The size of the image in gigabytes.
    :type size_gigabytes: float
    :param description: An optional free-form text field to describe an image.
    :type description: str
    :param tags: A set of tags. A flat array of tag names as strings to be applied to the resource.
     Tag names may be for either existing or new tags.
    :type tags: list[str]
    :param status: A status string indicating the state of a custom image. This may be ``NEW``\ ,
      ``available``\ , ``pending``\ , ``deleted``\ , or ``retired``. Possible values include:
     "NEW", "available", "pending", "deleted", "retired".
    :type status: str or ~digitalocean.models.ImageStatus
    :param error_message: A string containing information about errors that may occur when
     importing
      a custom image.
    :type error_message: str
    """

    _validation = {
        'id': {'readonly': True},
        'min_disk_size': {'minimum': 0},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'distribution': {'key': 'distribution', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'public': {'key': 'public', 'type': 'bool'},
        'regions': {'key': 'regions', 'type': '[str]'},
        'created_at': {'key': 'created_at', 'type': 'iso-8601'},
        'min_disk_size': {'key': 'min_disk_size', 'type': 'int'},
        'size_gigabytes': {'key': 'size_gigabytes', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'error_message': {'key': 'error_message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "ImageType"]] = None,
        distribution: Optional[Union[str, "Distribution"]] = None,
        slug: Optional[str] = None,
        public: Optional[bool] = None,
        regions: Optional[List[Union[str, "RegionSlug"]]] = None,
        created_at: Optional[datetime.datetime] = None,
        min_disk_size: Optional[int] = None,
        size_gigabytes: Optional[float] = None,
        description: Optional[str] = None,
        tags: Optional[List[str]] = None,
        status: Optional[Union[str, "ImageStatus"]] = None,
        error_message: Optional[str] = None,
        **kwargs
    ):
        super(Image, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = type
        self.distribution = distribution
        self.slug = slug
        self.public = public
        self.regions = regions
        self.created_at = created_at
        self.min_disk_size = min_disk_size
        self.size_gigabytes = size_gigabytes
        self.description = description
        self.tags = tags
        self.status = status
        self.error_message = error_message


class Kernel(msrest.serialization.Model):
    """**Note**\ : All Droplets created after March 2017 use internal kernels by default.
These Droplets will have this attribute set to ``null``.

The current `kernel <https://www.digitalocean.com/docs/droplets/how-to/kernel/>`_
for Droplets with externally managed kernels. This will initially be set to
the kernel of the base image when the Droplet is created.

    :param id: A unique number used to identify and reference a specific kernel.
    :type id: int
    :param name: The display name of the kernel. This is shown in the web UI and is generally a
     descriptive title for the kernel in question.
    :type name: str
    :param version: A standard kernel version string representing the version, patch, and release
     information.
    :type version: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[int] = None,
        name: Optional[str] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(Kernel, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.version = version


class MetaMeta(msrest.serialization.Model):
    """Information about the response itself.

    All required parameters must be populated in order to send to Azure.

    :param total: Required. Number of objects returned by the request.
    :type total: int
    """

    _validation = {
        'total': {'required': True},
    }

    _attribute_map = {
        'total': {'key': 'total', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        total: int,
        **kwargs
    ):
        super(MetaMeta, self).__init__(**kwargs)
        self.total = total


class MultipleDropletResponse(msrest.serialization.Model):
    """Multiple Droplet Response.

    All required parameters must be populated in order to send to Azure.

    :param droplets: Required.
    :type droplets: list[~digitalocean.models.Droplet]
    :param links: Required.
    :type links:
     ~digitalocean.models.Components10LqvkkResponsesDropletCreateContentApplicationJsonSchemaOneof1PropertiesLinks
    """

    _validation = {
        'droplets': {'required': True},
        'links': {'required': True},
    }

    _attribute_map = {
        'droplets': {'key': 'droplets', 'type': '[Droplet]'},
        'links': {'key': 'links', 'type': 'Components10LqvkkResponsesDropletCreateContentApplicationJsonSchemaOneof1PropertiesLinks'},
    }

    def __init__(
        self,
        *,
        droplets: List["Droplet"],
        links: "Components10LqvkkResponsesDropletCreateContentApplicationJsonSchemaOneof1PropertiesLinks",
        **kwargs
    ):
        super(MultipleDropletResponse, self).__init__(**kwargs)
        self.droplets = droplets
        self.links = links


class NetworkV4(msrest.serialization.Model):
    """NetworkV4.

    :param ip_address: The IP address of the IPv4 network interface.
    :type ip_address: str
    :param netmask: The netmask of the IPv4 network interface.
    :type netmask: str
    :param gateway: The gateway of the specified IPv4 network interface.
    
     For private interfaces, a gateway is not provided. This is denoted by
     returning ``nil`` as its value.
    :type gateway: str
    :param type: The type of the IPv4 network interface. Possible values include: "public",
     "private".
    :type type: str or ~digitalocean.models.NetworkV4Type
    """

    _attribute_map = {
        'ip_address': {'key': 'ip_address', 'type': 'str'},
        'netmask': {'key': 'netmask', 'type': 'str'},
        'gateway': {'key': 'gateway', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        netmask: Optional[str] = None,
        gateway: Optional[str] = None,
        type: Optional[Union[str, "NetworkV4Type"]] = None,
        **kwargs
    ):
        super(NetworkV4, self).__init__(**kwargs)
        self.ip_address = ip_address
        self.netmask = netmask
        self.gateway = gateway
        self.type = type


class NetworkV6(msrest.serialization.Model):
    """NetworkV6.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param ip_address: The IP address of the IPv6 network interface.
    :type ip_address: str
    :param netmask: The netmask of the IPv6 network interface.
    :type netmask: int
    :param gateway: The gateway of the specified IPv6 network interface.
    :type gateway: str
    :ivar type: The type of the IPv6 network interface.
    
     **Note**\ : IPv6 private  networking is not currently supported. Default value: "public".
    :vartype type: str
    """

    _validation = {
        'type': {'constant': True},
    }

    _attribute_map = {
        'ip_address': {'key': 'ip_address', 'type': 'str'},
        'netmask': {'key': 'netmask', 'type': 'int'},
        'gateway': {'key': 'gateway', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "public"

    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        netmask: Optional[int] = None,
        gateway: Optional[str] = None,
        **kwargs
    ):
        super(NetworkV6, self).__init__(**kwargs)
        self.ip_address = ip_address
        self.netmask = netmask
        self.gateway = gateway


class PageLinks(msrest.serialization.Model):
    """PageLinks.

    :param pages:
    :type pages: object
    """

    _attribute_map = {
        'pages': {'key': 'pages', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        pages: Optional[object] = None,
        **kwargs
    ):
        super(PageLinks, self).__init__(**kwargs)
        self.pages = pages


class Region(msrest.serialization.Model):
    """Region.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The display name of the region.  This will be a full name that is used
     in the control panel and other interfaces.
    :type name: str
    :param slug: Required. A human-readable string that is used as a unique identifier for each
     region.
    :type slug: str
    :param features: Required. This attribute is set to an array which contains features available
     in this region.
    :type features: object
    :param available: Required. This is a boolean value that represents whether new Droplets can be
     created in this region.
    :type available: bool
    :param sizes: Required. This attribute is set to an array which contains the identifying slugs
     for the sizes available in this region.
    :type sizes: object
    """

    _validation = {
        'name': {'required': True},
        'slug': {'required': True},
        'features': {'required': True},
        'available': {'required': True},
        'sizes': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'slug': {'key': 'slug', 'type': 'str'},
        'features': {'key': 'features', 'type': 'object'},
        'available': {'key': 'available', 'type': 'bool'},
        'sizes': {'key': 'sizes', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        slug: str,
        features: object,
        available: bool,
        sizes: object,
        **kwargs
    ):
        super(Region, self).__init__(**kwargs)
        self.name = name
        self.slug = slug
        self.features = features
        self.available = available
        self.sizes = sizes


class SingleDropletResponse(msrest.serialization.Model):
    """Single Droplet Response.

    All required parameters must be populated in order to send to Azure.

    :param droplet: Required.
    :type droplet: ~digitalocean.models.Droplet
    :param links: Required.
    :type links: ~digitalocean.models.DropletCreateApplicationJsonOneOfProperties
    """

    _validation = {
        'droplet': {'required': True},
        'links': {'required': True},
    }

    _attribute_map = {
        'droplet': {'key': 'droplet', 'type': 'Droplet'},
        'links': {'key': 'links', 'type': 'DropletCreateApplicationJsonOneOfProperties'},
    }

    def __init__(
        self,
        *,
        droplet: "Droplet",
        links: "DropletCreateApplicationJsonOneOfProperties",
        **kwargs
    ):
        super(SingleDropletResponse, self).__init__(**kwargs)
        self.droplet = droplet
        self.links = links


class Size(msrest.serialization.Model):
    """Size.

    All required parameters must be populated in order to send to Azure.

    :param slug: Required. A human-readable string that is used to uniquely identify each size.
    :type slug: str
    :param memory: Required. The amount of RAM allocated to Droplets created of this size. The
     value is represented in megabytes.
    :type memory: int
    :param vcpus: Required. The integer of number CPUs allocated to Droplets of this size.
    :type vcpus: int
    :param disk: Required. The amount of disk space set aside for Droplets of this size. The value
     is represented in gigabytes.
    :type disk: int
    :param transfer: Required. The amount of transfer bandwidth that is available for Droplets
     created in this size. This only counts traffic on the public interface. The value is given in
     terabytes.
    :type transfer: float
    :param price_monthly: Required. This attribute describes the monthly cost of this Droplet size
     if the Droplet is kept for an entire month. The value is measured in US dollars.
    :type price_monthly: float
    :param price_hourly: Required. This describes the price of the Droplet size as measured hourly.
     The value is measured in US dollars.
    :type price_hourly: float
    :param regions: Required. An array containing the region slugs where this size is available for
     Droplet creates.
    :type regions: list[str]
    :param available: Required. This is a boolean value that represents whether new Droplets can be
     created with this size.
    :type available: bool
    :param description: Required. A string describing the class of Droplets created from this size.
     For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.
    :type description: str
    """

    _validation = {
        'slug': {'required': True},
        'memory': {'required': True, 'minimum': 8, 'multiple': 8},
        'vcpus': {'required': True},
        'disk': {'required': True},
        'transfer': {'required': True},
        'price_monthly': {'required': True},
        'price_hourly': {'required': True},
        'regions': {'required': True},
        'available': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'slug': {'key': 'slug', 'type': 'str'},
        'memory': {'key': 'memory', 'type': 'int'},
        'vcpus': {'key': 'vcpus', 'type': 'int'},
        'disk': {'key': 'disk', 'type': 'int'},
        'transfer': {'key': 'transfer', 'type': 'float'},
        'price_monthly': {'key': 'price_monthly', 'type': 'float'},
        'price_hourly': {'key': 'price_hourly', 'type': 'float'},
        'regions': {'key': 'regions', 'type': '[str]'},
        'available': {'key': 'available', 'type': 'bool'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        slug: str,
        memory: int,
        vcpus: int,
        disk: int,
        transfer: float,
        price_monthly: float,
        price_hourly: float,
        regions: List[str],
        available: bool = True,
        description: str,
        **kwargs
    ):
        super(Size, self).__init__(**kwargs)
        self.slug = slug
        self.memory = memory
        self.vcpus = vcpus
        self.disk = disk
        self.transfer = transfer
        self.price_monthly = price_monthly
        self.price_hourly = price_hourly
        self.regions = regions
        self.available = available
        self.description = description
